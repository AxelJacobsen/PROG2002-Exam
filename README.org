#+TITLE: Assignment 2: 3D Pacman

* Controls:
- mouse to look around
- WASD follows the direction you are looking so W will always be forward
- F for fullscreen

- Quick note:
The program runs for me and other people i have tested it with, 
but due to quirks with openGL it is hard to know wheter or not it will properly run for you.
In case your machine is not powerful enough to run pellets as they are now go into the pelletshader and lower 
the int "stackCount" to 5 or lower. One of my computers create an unkown graphical bug which ruins the map, this however
has not shown itself on any other.

* Introduction

In this assignment each group is going to program a 3D version of the Pacman
game developed in Assignment 1. Similarly to Assignment 1, the software need to
be developed using C++ and OpenGL. In addition to the key concepts used in
Assingment 1, the core concepts needed to achieve this are:

- 3D Object Loading.
- 3D Geometry.
- 3D Transformations.
- Lighting.

As in Assignment 1, the game should follow the conventional gameplay principles
of character navigation in a maze, collection of pellets along the way and
avoiding ghosts.

* Evaluation

The *deadline* for the assignment is *November 21st 11:59pm* (strict).

This assignment is worth *30%* (all the requirements) of the total grade for the
course.

To be considered for its evaluation, the program must configure, build and run properly using the following technologies:

- Recent compiler (Visual studio 2019 or GCC > 9.0).
- Recent OpenGL (>= 4.3).
- If relevant, recent CMake (>= 3.12)
- Recent GLFW (>= 3.3.2)
- Recent GLEW (>= 2.1.0)
- GLM (>= 0.9.9.8)
- C++ >= 11.

In addition to functionality, we will put considerable weight on the professionalism of your solution:

- Modularity: Code should be organised by functionality and reusability, and make use of header files to specify the externally available functionality. Be clear about your decisions, especially whenever your code design deviates from the above-mentioned principles (e.g., for performance/memory reasons, etc.).
- Versioning: Use proper version practice. Commit early and often. You will work in teams, which makes frequent commits important in order to avoid merge conflicts.
- Code as documentation: Make your code readable and add comments to clarify its function and purpose.

Before submission, please ensure:

 - your group allocations are up to date at the time of submission
 - your code compiles and runs. We will not mark code that does not compile! You
   should provide instructions on how to run in the README file that is part of
   the forked repository.

Your program has to provide the following features:

- Read the provided map layout and render it on the screen. Walls should have textures. Feel free to use any texture of choice.
- Have a Pacman player character that is controlled using the conventional *WASD* keyboard mapping. Pacman should not be able to run through walls.
- Include collectible pellets. Once collected, the items should disappear from the map.
- Have moving ghosts. Collition between Pacman and the Ghosts terminates the game.
- At least one character type (Pacman, ghosts, collectibles) needs to be loaded from a model (e.g., .obj file).
- Basic lighting model.
- You can choose to implement the game from a first-person perspective. Alternatively, you can implement a third-person perspective (three-dimensionality needs to be obvious, e.g., don't fix the camera from top to bottom like in Assignment 1)

Examples on Pacman 3D:

- [[https://www.youtube.com/watch?v=vIrFJK6NhCE][https://www.youtube.com/watch?v=vIrFJK6NhCE]]
- [[https://www.youtube.com/watch?v=IujqngIEdb0]]
